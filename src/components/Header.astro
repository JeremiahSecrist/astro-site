---
import HeaderLink from "./HeaderLink.astro";
import { SITE_TITLE } from "../consts";
const BASE_URL = import.meta.env.BASE_URL;
let links = [
  ["Home", "家"],
  ["Menu", "メニュー"],
  ["Waitlist", "キャン待ち"],
  ["FAQ", "訪う"],
  ["Blog", "ブログ"],
  ["Reach-Us", "伸ばす"],
];
---

<nav
  id="navbar"
  class="overlay-accent relative flex items-center justify-between bg-jp-waves p-2"
>
  <a
    href={BASE_URL}
    id="navBrand"
    class="rounded-r-full bg-black/50 p-2 font-extrabold text-primary-300"
  >
    <span class="pr-4 text-lg"> Koushinryou </span>
    <span class="block text-sm text-accent-200">香辛料</span>
  </a>
  <div
    id="currentPage"
    class="self-center text-2xl capitalize text-white lg:hidden"
  >
    home
  </div>
  <div
    id="nav-menu"
    class="absolute right-0 top-full z-50 flex hidden w-full flex-col items-end bg-accent-900 p-2 lg:relative lg:w-auto lg:bg-transparent lg:p-0"
  >
    {
      links.map((item) => (
        <a
          href={`${BASE_URL}/${item[0].toLowerCase() === "home" ? "" : item[0].toLowerCase()}`}
          class="nav-link lg:min group m-1 flex w-48 flex-row place-content-end bg-black/40 bg-repeat p-3 capitalize text-gray-300 *:mx-1 md:w-fit lg:mx-1 lg:items-center lg:rounded-md lg:first:rounded-l-full"
        >
          <span class="font-bold text-primary-200 group-hover:underline">
            {item[0]}
          </span>
          <span class="text-sm italic group-hover:underline">{item[1]}</span>
        </a>
      ))
    }
  </div>
  <button
    id="menu-toggle"
    aria-expanded="false"
    aria-controls="nav-menu"
    class="flex items-center justify-center rounded-md bg-black/50 fill-white px-3 py-2 lg:hidden"
  >
    <svg
      id="hamburger-icon"
      xmlns="http://www.w3.org/2000/svg"
      fill="black"
      viewBox="0 0 24 24"
      stroke-width="2"
      stroke="white"
      class="h-6 w-6"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M4 6h16M4 12h16m-7 6h7"></path>
    </svg>
    <svg
      id="close-icon"
      xmlns="http://www.w3.org/2000/svg"
      fill="black"
      viewBox="0 0 24 24"
      stroke-width="2"
      stroke="white"
      class="hidden h-6 w-6"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M6 18L18 6M6 6l12 12"></path>
    </svg>
  </button>
</nav>
<style>
  @media (min-width: 1024px) {
    #nav-menu {
      display: flex;
      flex-direction: row;
    }
    #menu-toggle {
      display: none;
    }
    #currentPage {
      display: none;
    }
  }
</style>

<script is:inline data-astro-rerun>
  function initializeNav() {
    const menuToggle = document.getElementById("menu-toggle");
    const navMenu = document.getElementById("nav-menu");
    const hamburgerIcon = document.getElementById("hamburger-icon");
    const closeIcon = document.getElementById("close-icon");
    const currentPage = document.getElementById("currentPage");
    const navLinks = navMenu.querySelectorAll("a");
    const toggleMenu = () => {
      const isHidden = navMenu.classList.toggle("hidden");
      menuToggle.setAttribute("aria-expanded", !isHidden);
      hamburgerIcon.classList.toggle("hidden", !isHidden);
      closeIcon.classList.toggle("hidden", isHidden);
    };

    const handleResize = () => {
      const isDesktop = window.innerWidth >= 1024;
      navMenu.classList.toggle("hidden", !isDesktop);
      currentPage.classList.toggle("hidden", isDesktop);
      hamburgerIcon.classList.toggle("hidden", isDesktop);
      closeIcon.classList.toggle("hidden", true);
    };

    const setPageName = () => {
      const path = window.location.pathname;
      let pageName =
        path.substring(path.lastIndexOf("/") + 1).toLowerCase() || "home";
      currentPage.textContent = pageName === "index" ? "home" : pageName;
    };

    const closeMenuOnLinkClick = () => {
      if (window.innerWidth < 1024) {
        navMenu.classList.add("hidden");
        menuToggle.setAttribute("aria-expanded", false);
        hamburgerIcon.classList.remove("hidden");
        closeIcon.classList.add("hidden");
      }
    };

    menuToggle.addEventListener("click", toggleMenu);
    window.addEventListener("resize", handleResize);
    navLinks.forEach((link) => {
      link.addEventListener("click", () => {
        setPageName();
        closeMenuOnLinkClick();
      });
    });
    setPageName();
    handleResize();
  }

  // // Initialize the nav on initial load
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializeNav);
  } else {
    initializeNav();
  }
</script>
